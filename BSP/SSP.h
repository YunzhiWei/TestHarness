
#define INCLUDE_MODULE_SSP

typedef enum
{
    SSP_ID_1                = 0u,
    SSP_ID_2                = 1u,
    SSP_ID_3                = 2u,
    SSP_ID_4                = 3u
}SSP_MODULE_ID_t;

typedef enum
{
    SSP_ID_SPI_LCD          = 0u,
    SSP_ID_I2S_AUDIO_OUT    = 1u,
    SSP_ID_PCM_AUDIO_IN     = 2u,
    SSP_ID_PCM_AUDIO_OUT    = 3u
}SSP_CONFIG_ID_t;

typedef enum
{
    SSP_SAMPLE_BIT_32       = 0u,
    SSP_SAMPLE_BIT_18       = 1u,
    SSP_SAMPLE_BIT_16       = 2u,
    SSP_SAMPLE_BIT_08       = 3u
}SSP_SAMPLE_BIT_t;

typedef enum
{
    SSP_CHANNEL_NONE        = 0u,
    SSP_CHANNEL_LEFT        = SSxSA_xTSA(0u),
    SSP_CHANNEL_RIGHT       = SSxSA_xTSA(1u),
    SSP_CHANNEL_STEREO      = SSxSA_xTSA(1u)|SSxSA_xTSA(0)
}SSP_CHANNEL_t;

#define SSP_SOURCE_CLOCK_RATE           (1u * 13*1000*1000) // Without '1u' the sizeof(SSP_XXXX) will be 2 instead of 4.
typedef enum
{
    SSP_SAMPLE_RATE_SPI     = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SCR_07F),
    SSP_SAMPLE_RATE_PCM_4K  = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/32/4000),  //  3984
    SSP_SAMPLE_RATE_PCM_8K  = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/32/8000),  //  7812
    SSP_SAMPLE_RATE_PCM_16K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/16/16000), //  7812
    SSP_SAMPLE_RATE_PCM_32K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/16/32000), //  7812
    SSP_SAMPLE_RATE_I2S_4K  = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/4000),  //  3984
    SSP_SAMPLE_RATE_I2S_8K  = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/8000),  //  7812
    SSP_SAMPLE_RATE_I2S_11K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/11025), // 10690
    SSP_SAMPLE_RATE_I2S_16K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/16000), //  7812
    SSP_SAMPLE_RATE_I2S_22K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/22050), // 20310
    SSP_SAMPLE_RATE_I2S_44K = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_ECS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/44100), // 40630
//    SSP_SAMPLE_RATE_48K     = (0 * SSCR0_ACS) | (0 * SSCR0_NCS) | (0 * SSCR0_NCS) | SSCR0_SCR(SSP_SOURCE_CLOCK_RATE/64/48000), // SSP_SOURCE_CLOCK_RATE/64/44100 == SSP_SOURCE_CLOCK_RATE/64/48000
}SSP_SAMPLE_RATE_t;

void SSP_Disable(SSP_MODULE_ID_t tMID);
void SSP_Enable(SSP_MODULE_ID_t tMID);
void SSP_Initial(SSP_MODULE_ID_t tMID, SSP_CONFIG_ID_t tCID, SSP_SAMPLE_RATE_t tSampleRate, SSP_SAMPLE_BIT_t tSampleBit, SSP_CHANNEL_t tChannel);
void SSP_Wait4Idle(SSP_MODULE_ID_t tMID);
void SSP_SendB2B(SSP_MODULE_ID_t tMID, U8 *pData, U32 dwLength);
void SSP_SendB2D(SSP_MODULE_ID_t tMID, U8 *pData, U32 dwNumber);
void SSP_SendW2D(SSP_MODULE_ID_t tMID, U16 *pData, U32 dwNumber);
void SSP_SendD2D(SSP_MODULE_ID_t tMID, U32 *pData, U32 dwNumber);
U32  SSP_ReceiveB2B(SSP_MODULE_ID_t tMID, U8 *pData, U32 dwNumber);
void SSP_ReceiveD2W(SSP_MODULE_ID_t tMID, U16 *pData, U32 dwNumber);
void SSP_ReceiveD2D(SSP_MODULE_ID_t tMID, U32 *pData, U32 dwNumber);


